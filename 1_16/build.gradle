import io.github.headlesshq.headlessmc.gradle.HeadlessMcRunTask
import me.earth.headlessmc.launcher.modlauncher.Modlauncher

buildscript {
    repositories {
        maven {
            name = "3arthMaven"
            url = "https://3arthqu4ke.github.io/maven"
        }
    }

    dependencies {
        classpath "me.earth.headlessmc:headlessmc-launcher:2.1.0"
        classpath "io.github.headlesshq:headlessmc-gradle-plugin:0.2.0"
        // classpath "org.semver4j:semver4j:5.3.0" ??? had bugs with this
    }
}

plugins {
    id 'java'
    id 'xyz.wagyourtail.unimined' version '1.3.3'
    id 'io.github.headlesshq.headlessmc-gradle-plugin' version '0.1.0'
}

group 'me.earth.headlessmc'
version '0.4.0'

base {
    archivesName = "hmc-optimizations-${minecraft_version}"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
    fabric
    lexforge
}

repositories {
    mavenCentral()
    maven {
        url = "https://files.minecraftforge.net/maven"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        url = "https://maven.wagyourtail.xyz/releases"
    }

    maven {
        name = '3arthMaven'
        url = 'https://3arthqu4ke.github.io/maven'
    }
}

unimined.minecraft {
    version project.minecraft_version

    mappings {
        mojmap()
        // intermediary()
        // yarn(1)

        devFallbackNamespace "mojmap"

        /*stub.withMappings("intermediary", ["yarn"]) {
            c("net/minecraft/class_1927", []) {
                m("method_55109", "()Lnet/minecraft/class_243;", ["getPos"])
            }
        }*/
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.fabric) {
    combineWith(sourceSets.main)

    fabric {
        loader project.fabric_version
    }

    defaultRemapJar = true
}

unimined.minecraft(sourceSets.lexforge) {
    combineWith(sourceSets.main)

    minecraftForge {
        loader project.lexforge_version
        mixinConfig 'hmcoptimizations.mixins.json'
    }

    minecraftRemapper.config {
        ignoreConflicts(true)
    }

    defaultRemapJar = true
}

configurations {
    mainImplementation
}

configurations {
    lwjglAgent.extendsFrom runtimeOnly
}

dependencies {
    compileOnly 'org.spongepowered:mixin:0.8.5-SNAPSHOT'
    compileOnly 'me.earth.headlessmc:headlessmc-api:2.1.0'
    lwjglAgent 'me.earth.headlessmc:headlessmc-lwjgl:2.1.0'
}

afterEvaluate {
    fabricRunClient {
        standardInput = System.in
        if (rootProject.property('hmc.lwjgl').toBoolean()) {
            jvmArgs += ["-javaagent:${configurations.lwjglAgent.files.iterator().next()}"]
            systemProperties['joml.nounsafe'] = 'true'
            systemProperties['fabric.systemLibraries'] = "${configurations.lwjglAgent.files.iterator().next()}"
        }
    }
}

jar {
    enabled = false
}

processFabricResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

processLexforgeResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

// Forge Runs seem to have problems running from the build/classes folder
// So instead we just run from the built jar
afterEvaluate {
    lexforgeRunClient {
        dependsOn(lexforgeJar)
        classpath = classpath.filter {
            !it.toString().contains('hmc-optimizations/build/classes/java/'.replace('/', File.separator))
                    && !it.toString().contains('hmc-optimizations/build/resources/'.replace('/', File.separator))
        }

        classpath += files("${projectDir}/build/libs/hmc-optimizations-${version}-lexforge-dev.jar".replace('/', File.separator))
    }
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    from("LICENSE") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        rename { "${it}_${project.archivesBaseName}" }
    }

    manifest {
        attributes(
            'Implementation-Title': 'HMC-Optimizations',
            'MixinConfigs': "hmcoptimizations.mixins.json",
            'Implementation-Version': project.version,
        )
    }
}

for (Modlauncher mLauncher : Modlauncher.values()) {
    def ml = mLauncher
    if (ml != Modlauncher.NEOFORGE) {
        tasks.register("${ml.officialName}RunWithHeadlessMc", HeadlessMcRunTask) {
            group 'headlessmc'
            from(tasks.named("remap${ml.hmcName.capitalize()}Jar"))
            into(modsDirectory)

            version = "${minecraft_version}"
            modlauncher = ml
            lwjgl = rootProject.property('hmc.lwjgl').toBoolean()
            mcRuntimeTest = rootProject.property('mc.runtime.test').toBoolean()
            // specifics = true
        }
    }
}
